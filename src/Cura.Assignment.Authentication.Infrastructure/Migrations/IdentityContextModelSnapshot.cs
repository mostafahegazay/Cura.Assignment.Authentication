// <auto-generated />
using System;
using Cura.Assignment.Authentication.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cura.Assignment.Authentication.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("PermissionsIdentity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("06c64da8-221e-4eab-8145-710ef6e8f962"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 403, DateTimeKind.Local).AddTicks(882),
                            Name = "b_game"
                        },
                        new
                        {
                            Id = new Guid("998351e7-91de-49d7-9ef6-20d0898d7786"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 403, DateTimeKind.Local).AddTicks(878),
                            Name = "vip_chararacter_personalize"
                        });
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("RolesIdentity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4391979-5c20-4207-b51a-e3dd7481fdf8"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 403, DateTimeKind.Local).AddTicks(735),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("7d64f5c3-c11b-456e-9f24-9f3f21871b25"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 403, DateTimeKind.Local).AddTicks(793),
                            Name = "player"
                        });
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("UsersIdentity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bb1f70-00cf-4a03-9a7a-bae4e2448da5"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 403, DateTimeKind.Local).AddTicks(898),
                            Email = "mostafa.emad@hotmail.com",
                            Name = "Mostafa Emad",
                            Password = "uZaIgLj/hmp77MzARRNYIdJMxbmB9uKzXJHf4xfq+Ro=",
                            RoleId = new Guid("f4391979-5c20-4207-b51a-e3dd7481fdf8"),
                            Salt = "Srrf53wM+crCUvybDv1WzbUzKFrLaowe5dKErJKo/+KTNO6e41hGDg=="
                        });
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PermssionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermssionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissionsIdentity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e96129cb-77fc-462a-b022-cad105159b11"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 404, DateTimeKind.Local).AddTicks(3886),
                            PermssionId = new Guid("998351e7-91de-49d7-9ef6-20d0898d7786"),
                            UserId = new Guid("68bb1f70-00cf-4a03-9a7a-bae4e2448da5")
                        },
                        new
                        {
                            Id = new Guid("0283b732-4f02-4fbc-a01c-a752497cef1c"),
                            CreatedAt = new DateTime(2023, 2, 5, 22, 56, 38, 404, DateTimeKind.Local).AddTicks(3890),
                            PermssionId = new Guid("06c64da8-221e-4eab-8145-710ef6e8f962"),
                            UserId = new Guid("68bb1f70-00cf-4a03-9a7a-bae4e2448da5")
                        });
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.HasOne("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.UserPermission", b =>
                {
                    b.HasOne("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.Permission", "Permission")
                        .WithMany("Permissions")
                        .HasForeignKey("PermssionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.Permission", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cura.Assignment.Authentication.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
